# Install dan load library yang dibutuhkan (jika belum ada)
# install.packages("quantmod")
# install.packages("rugarch")
# install.packages("ggplot2")
# install.packages("reshape2") # untuk mengubah format data menjadi 'long'

library(quantmod) # Untuk contoh data saham
library(rugarch)  # Untuk estimasi dan simulasi GARCH
library(ggplot2)  # Untuk visualisasi
library(reshape2) # Untuk data wrangling

# --- 1. Persiapan Data (Konseptual, menggunakan data BBCA hipotetis) ---
# Mengambil contoh data BBCA (jika ada, kalau tidak, bisa pakai data dummy)
# Karena ini konseptual, kita akan membuat data dummy yang merepresentasikan return saham.
# Asumsikan data return historis BBCA dari Maret-Mei 2025.
# Anda bisa mengganti ini dengan data aktual BBCA Anda.

# Membuat data return dummy (misal 60 hari kerja)
set.seed(123) # untuk reproduktifitas
n_days_history <- 60
dummy_returns <- rnorm(n_days_history, mean = 0.0005, sd = 0.015) # daily return rata-rata dan sd
dummy_prices <- 9000 * exp(cumsum(dummy_returns)) # Harga awal 9000

# Untuk GARCH, kita butuh return.
returns <- dummy_returns

# --- 2. Estimasi Model GARCH (Hipotetis) ---
# Spesifikasi model GARCH(1,1)
garch_spec <- ugarchspec(
  variance.model = list(model = "sGARCH", garchOrder = c(1, 1)),
  mean.model = list(armaOrder = c(0, 0), include.mean = TRUE), # Mean model sederhana
  distribution.model = "norm" # Asumsi distribusi normal untuk z_t
)

# Fitting model GARCH (menggunakan data dummy_returns)
# Ini hanya untuk demonstrasi konsep, parameter yang didapat tidak dari data BBCA asli.
garch_fit_object <- tryCatch({
  ugarchfit(spec = garch_spec, data = returns)
}, error = function(e) {
  message("GARCH fitting failed (", e$message, "), using dummy GARCH parameters for visualization.")
  # Mengembalikan NULL atau flag khusus untuk menunjukkan kegagalan
  return(NULL)
})

# Ekstraksi parameter GARCH dari hasil fitting (atau dummy jika gagal)
# Memeriksa apakah fitting berhasil dan objek yang dikembalikan adalah uGARCHfit (S4 object)
if (!is.null(garch_fit_object) && inherits(garch_fit_object, "uGARCHfit")) {
  # Fitting berhasil dan merupakan objek uGARCHfit
  mu_garch <- coef(garch_fit_object)["mu"]
  omega_garch <- coef(garch_fit_object)["omega"]
  alpha_garch <- coef(garch_fit_object)["alpha1"]
  beta_garch <- coef(garch_fit_object)["beta1"]

  initial_variance <- tail(sigma(garch_fit_object)^2, 1)
  initial_epsilon_sq <- tail(residuals(garch_fit_object)^2, 1)

  message("GARCH model fitted successfully with extracted parameters.")
} else {
  # Fitting gagal atau mengembalikan objek yang tidak valid, gunakan parameter dummy
  message("Using pre-defined dummy GARCH parameters as fitting failed or returned invalid object.")
  mu_garch <- 0.0005
  omega_garch <- 0.000005
  alpha_garch <- 0.1
  beta_garch <- 0.85

  # Untuk initial_variance dan initial_epsilon_sq, jika fitting gagal,
  # kita perlu menurunkannya dari data dummy atau menetapkan default yang masuk akal.
  initial_variance <- var(returns) # Gunakan varians dari dummy returns
  initial_epsilon_sq <- mean(returns^2) # Proxy sederhana untuk rata-rata residual kuadrat
}

# Tambahkan pemeriksaan untuk nilai NA pada parameter yang diekstrak jika coef() mengembalikan NA
if (is.na(mu_garch)) mu_garch <- 0.0005
if (is.na(omega_garch)) omega_garch <- 0.000005
if (is.na(alpha_garch)) alpha_garch <- 0.1
if (is.na(beta_garch)) beta_garch <- 0.85

# Pastikan initial_variance dan initial_epsilon_sq valid
if (is.na(initial_variance) || initial_variance <= 0) initial_variance <- var(returns)
if (is.na(initial_epsilon_sq) || initial_epsilon_sq <= 0) initial_epsilon_sq <- mean(returns^2)


# --- 3. Simulasi Monte Carlo ---
n_simulations <- 100 # Jumlah jalur simulasi
n_forecast_days <- 60 # Horizon proyeksi (misal 3 bulan kerja)
S0 <- tail(dummy_prices, 1) # Harga awal dari data dummy

# Pre-allocate matriks untuk menyimpan hasil simulasi
# Baris: hari, Kolom: jalur simulasi
price_paths_gbm <- matrix(NA, nrow = n_forecast_days + 1, ncol = n_simulations)
price_paths_garch <- matrix(NA, nrow = n_forecast_days + 1, ncol = n_simulations)

# Inisialisasi harga awal
price_paths_gbm[1, ] <- S0
price_paths_garch[1, ] <- S0

# Parameter GBM sederhana (volatilitas konstan)
# Estimasi volatilitas historis (standar deviasi dari return historis)
sigma_gbm <- sd(returns)
mu_gbm <- mean(returns)

# Simulasi GBM (Volatilitas Konstan)
for (i in 1:n_simulations) {
  for (t in 1:n_forecast_days) {
    Zt <- rnorm(1) # random number dari distribusi normal standar
    price_paths_gbm[t + 1, i] <- price_paths_gbm[t, i] * exp((mu_gbm - 0.5 * sigma_gbm^2) + sigma_gbm * Zt)
  }
}

# Simulasi GARCH-Monte Carlo (Volatilitas Dinamis)
for (i in 1:n_simulations) {
  current_price <- S0
  current_variance <- initial_variance # Varians dari akhir periode fitting
  current_epsilon_sq <- initial_epsilon_sq # Residual kuadrat dari akhir periode fitting

  price_paths_garch[1, i] <- S0
  
  for (t in 1:n_forecast_days) {
    # Prediksi volatilitas GARCH satu langkah ke depan
    # Menggunakan parameter yang diestimasi
    predicted_variance <- omega_garch + alpha_garch * current_epsilon_sq + beta_garch * current_variance
    
    # Pastikan varians positif
    predicted_variance <- max(predicted_variance, 1e-10) # Minimal 0 untuk mencegah NaN
    
    predicted_sigma <- sqrt(predicted_variance)
    
    Zt <- rnorm(1) # random number dari distribusi normal standar
    
    # Hitung return baru
    daily_return <- (mu_garch - 0.5 * predicted_sigma^2) + predicted_sigma * Zt
    
    # Update harga
    current_price <- current_price * exp(daily_return)
    
    # Simpan harga
    price_paths_garch[t + 1, i] <- current_price
    
    # Update current_epsilon_sq dan current_variance untuk iterasi berikutnya
    current_epsilon_sq <- (daily_return - mu_garch)^2 # Residual kuadrat baru
    current_variance <- predicted_variance # Volatilitas yang baru diprediksi
  }
}

# --- 4. Visualisasi Hasil Konseptual ---

# Gabungkan data untuk visualisasi dengan ggplot2
df_gbm <- as.data.frame(price_paths_gbm)
df_gbm$Time <- 0:n_forecast_days
df_gbm$Model <- "GBM (Volatilitas Konstan)"

df_garch <- as.data.frame(price_paths_garch)
df_garch$Time <- 0:n_forecast_days
df_garch$Model <- "GARCH-Monte Carlo (Volatilitas Dinamis)"

# Mengubah format ke 'long' untuk ggplot
df_long_gbm <- melt(df_gbm, id.vars = c("Time", "Model"), variable.name = "Simulation", value.name = "Price")
df_long_garch <- melt(df_garch, id.vars = c("Time", "Model"), variable.name = "Simulation", value.name = "Price")

# Ambil beberapa jalur simulasi untuk visualisasi yang lebih jelas
set.seed(456) # Untuk memilih jalur yang sama
sample_sims <- sample(1:n_simulations, min(n_simulations, 10)) # Ambil 10 jalur contoh atau kurang jika total simulasi < 10

df_sample_gbm <- df_long_gbm[df_long_gbm$Simulation %in% paste0("V", sample_sims), ]
df_sample_garch <- df_long_garch[df_long_garch$Simulation %in% paste0("V", sample_sims), ]

df_combined_sample <- rbind(df_sample_gbm, df_sample_garch)

# Plot jalur harga
ggplot(df_combined_sample, aes(x = Time, y = Price, group = Simulation, color = Model)) +
  geom_line(alpha = 0.6) +
  labs(
    title = "Konseptualisasi Pergerakan Harga Saham: Volatilitas Konstan vs Dinamis",
    subtitle = paste0("Simulasi ", n_simulations, " Jalur, Proyeksi ", n_forecast_days, " Hari"),
    x = "Hari ke Depan",
    y = "Harga Saham"
  ) +
  scale_color_manual(values = c("GBM (Volatilitas Konstan)" = "blue", "GARCH-Monte Carlo (Volatilitas Dinamis)" = "red")) +
  theme_minimal() +
  theme(legend.position = "bottom")

# Visualisasi distribusi harga pada hari terakhir proyeksi
df_final_prices <- data.frame(
  Price = c(price_paths_gbm[n_forecast_days + 1, ], price_paths_garch[n_forecast_days + 1, ]),
  Model = c(rep("GBM (Volatilitas Konstan)", n_simulations), rep("GARCH-Monte Carlo (Volatilitas Dinamis)", n_simulations))
)

ggplot(df_final_prices, aes(x = Price, fill = Model)) +
  geom_density(alpha = 0.6) +
  labs(
    title = paste0("Distribusi Harga Saham pada Hari ke-", n_forecast_days),
    subtitle = "Perbandingan Volatilitas Konstan vs Dinamis",
    x = "Harga Saham",
    y = "Densitas"
  ) +
  scale_fill_manual(values = c("GBM (Volatilitas Konstan)" = "blue", "GARCH-Monte Carlo (Volatilitas Dinamis)" = "red")) +
  theme_minimal() +
  theme(legend.position = "bottom")

# --- Visualisasi Konseptual Perbandingan Volatilitas ---
# Ini lebih ke arah Grafik 1 dari Bab 2 Anda

# Buat deret volatilitas konstan dan dinamis (hipotetis)
time_points <- 1:250
constant_volatility <- rep(8, length(time_points)) # Misal 8%
garch_volatility <- numeric(length(time_points))
garch_volatility[1] <- 7 # Volatilitas awal

# Simulasikan volatilitas GARCH secara konseptual
# Ini bukan simulasi GARCH sebenarnya, tapi untuk menunjukkan pola clustering
set.seed(789)
for (i in 2:length(time_points)) {
  # Volatilitas cenderung kembali ke rata-rata, tapi ada shock
  garch_volatility[i] <- 0.05 * garch_volatility[i-1] + 0.95 * 8 + rnorm(1, 0, 2)
  # Batasi agar tidak terlalu ekstrem
  garch_volatility[i] <- max(4, min(garch_volatility[i], 15))
}


volatility_data <- data.frame(
  Waktu = time_points,
  Volatilitas_Konstan = constant_volatility,
  Volatilitas_GARCH = garch_volatility
)

volatility_data_long <- melt(volatility_data, id.vars = "Waktu", variable.name = "Jenis_Volatilitas", value.name = "Volatilitas_Persen")

ggplot(volatility_data_long, aes(x = Waktu, y = Volatilitas_Persen, color = Jenis_Volatilitas)) +
  geom_line(size = 1) +
  labs(
    title = "Perbandingan Volatilitas: Konstan vs. Dinamis (Konseptual)",
    subtitle = "Mengilustrasikan 'Volatility Clustering' dalam Model GARCH",
    x = "Waktu",
    y = "Volatilitas (%)"
  ) +
  scale_color_manual(values = c("Volatilitas_Konstan" = "blue", "Volatilitas_GARCH" = "red"),
                     labels = c("Volatilitas Konstan", "Volatilitas GARCH")) +
  theme_minimal() +
  theme(legend.title = element_blank(),
        legend.position = "bottom")